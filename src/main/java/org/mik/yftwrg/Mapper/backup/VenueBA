package org.mik.yftwrg.Mapper;

import org.mik.yftwrg.DTO.VenueDTO;
import org.mik.yftwrg.Entity.Venue;

import java.util.stream.Collectors;


public class VenueMapper implements EntityMapper<Venue, VenueDTO>{

    @Override
    public VenueDTO toDto(Venue venue){
        if(venue == null){
            return null;
        }

        VenueDTO dto = new VenueDTO();
        //VenueDTO has address and eventid
        dto.setId(venue.getId());
        dto.setAddress(venue.getAddress());
        //localdatetime
        dto.setCreated(venue.getCreatedAt());
        dto.setUpdated(venue.getUpdatedAt());

        if(venue.getEvents() != null){
            dto.setEventIds(venue.getEvents()
                    .stream()
                    .map(e -> e.getId())
                    .collect(Collectors.toList())
                            );
        }
        return dto;
    }

    @Override
    public Venue toEntity(VenueDTO dto) {
        if (dto == null) return null;

        Venue venue = new Venue();
        venue.setId(dto.getId());
        venue.setAddress(dto.getAddress());
        venue.setCreatedAt(dto.getCreated());
        venue.setUpdatedAt(dto.getUpdated());

        // Avoid setting events here to prevent circular mapping
        return venue;
    }

    @Override
    public void updateFromDto(VenueDTO dto, Venue entity) {
        if (dto == null || entity == null) return;

        entity.setAddress(dto.getAddress());
    }

}
